openapi: 3.0.3
info:
  title: Documentação CodeTalent - Serviço Produto
  description: |-
    Esta API fornece uma interface completa para gerenciar produtos e preços de venda em um ambiente multi-loja.
  version: '1.0'
tags:
  - name: products
    description: Tudo sobre a gestão de produtos
  - name: supermarkets
    description: Tudo sobre a gestão de lojas
paths:
  /api/v1/products:
    get:
      tags:
        - products
      summary: Busca por produtos com base em filtros.
      operationId: findProduct
      parameters:
        - name: page
          in: query
          description: Define a página de busca.
          required: true
          explode: true
          schema:
            type: number
            default: 1
        - name: perPage
          in: query
          description: Define a quantidade de itens para por página de busca.
          required: true
          explode: true
          schema:
            type: number
            default: 10
        - name: description
          in: query
          description: Termo de busca por descrição de produto.
          required: false
          explode: true
          schema:
            type: string
        - name: productId
          in: query
          description: Termo de busca por id de produto.
          required: false
          explode: true
          schema:
            type: number
        - name: cost
          in: query
          description: Termo de busca por custo de produto.
          required: false
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: Busca realizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputFindProducts'
        '404':
          description: Não foi possível encontrar produto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '500':
          description: Ocorreu um erro interno no servidor.
    post:
      tags:
        - products
      summary: Criar um novo produto.
      operationId: createProduct
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputCreateProduct'
      responses:
        '201':
          description: Criação realizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputCreateProduct'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'

  /api/v1/products/{id}:
    get:
      tags:
        - products
      summary: Busca por produtos com base em filtros.
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: Id do produto
          required: true
          explode: true
          schema:
            type: number
            default: 1
      responses:
        '200':
          description: Busca realizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputGetProduct'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    put:
      tags:
        - products
      summary: Atualizar informaçoes de produto.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: Id do produto
          required: true
          explode: true
          schema:
            type: number
            default: 1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputUpdateProduct'
      responses:
        '201':
          description: Criação realizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputCreateProduct'
        '404':
          description: Não foi possível encontrar produto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    delete:
      tags:
        - products
      summary: Deleta um produto.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: Id do produto
          required: true
          explode: true
          schema:
            type: number
            default: 1
      responses:
        '200':
          description: Deleção realizada com sucesso.
        '404':
          description: Não foi possível encontrar produto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'

  /api/v1/products/{id}/sale-price/{supermarketId}:
    post:
      tags:
        - products
      summary: Vincula um preço de venda de produto para uma loja.
      operationId: assignSalePrice
      parameters:
        - name: id
          in: path
          description: Id do produto
          required: true
          explode: true
          schema:
            type: number
            default: 1
        - name: supermarketId
          in: path
          description: Id da loja
          required: true
          explode: true
          schema:
            type: number
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputAssignSalePrice'
      responses:
        '201':
          description: Vinculo de preço venda de produto para loja realizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputGetProduct'
        '409':
          description: Já existe um preço de venda vinculado ao produto com essa loja.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '404':
          description: Não foi possível encontrar loja e/ou produto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    put:
      tags:
        - products
      summary: Atualiza preço de venda de produto para uma loja.
      operationId: updateSalePriceProduct
      parameters:
        - name: id
          in: path
          description: Id do produto
          required: true
          explode: true
          schema:
            type: number
            default: 1
        - name: supermarketId
          in: path
          description: Id da loja
          required: true
          explode: true
          schema:
            type: number
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputAssignSalePrice'
      responses:
        '200':
          description: Preço venda de produto para loja atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputGetProduct'
        '404':
          description: Não foi possível encontrar loja e/ou produto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    delete:
      tags:
        - products
      summary: Deleta o preço de venda de um produto para uma loja.
      operationId: deleteSalePrice
      parameters:
        - name: id
          in: path
          description: Id do produto
          required: true
          explode: true
          schema:
            type: number
            default: 1
        - name: supermarketId
          in: path
          description: Id da loja
          required: true
          explode: true
          schema:
            type: number
            default: 1
      responses:
        '200':
          description: Deleção realizada com sucesso.
        '404':
          description: Não foi possível encontrar produto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'

  /api/v1/supermarkets:
    get:
      tags:
        - supermarkets
      summary: Busca por todas as lojas.
      operationId: findSupermarkets
      responses:
        '200':
          description: Busca realizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputFindSupermarkets'
        '500':
          description: Ocorreu um erro interno no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'

components:
  schemas:
    ProductDto:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: 'COSTELA BOVINA'
        cost:
          type: number
          example: 54.43
        image:
          $ref: '#/components/schemas/Buffer'
    Buffer:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          example: 'Buffer'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Byte'
    Byte:
      type: integer
      example: 117
    SalePriceDto:
      type: object
      required:
        - productId
        - supermarket
        - salePrice
      properties:
        productId:
          type: integer
          format: int64
          example: 1
        supermarket:
          $ref: '#/components/schemas/SupermarketDto'
        salePrice:
          type: number
          example: 54.43
    SupermarketDto:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: 'LOJA TESTE'
    OutputFindSupermarkets:
      type: object
      required:
        - products
        - maxPage
        - total
      properties:
        statusCode:
          type: number
          example: 200
        path:
          type: string
          example: 'http://dominio.com/api/v1/caminho'
        timestamp:
          type: string
          example: '2024-07-14T00:00:00.000Z'
        data:
          type: object
          properties:
            supermarkets:
              type: array
              items:
                $ref: '#/components/schemas/SupermarketDto'
    OutputFindProducts:
      type: object
      required:
        - products
        - maxPage
        - total
      properties:
        statusCode:
          type: number
          example: 200
        path:
          type: string
          example: 'http://dominio.com/api/v1/caminho'
        timestamp:
          type: string
          example: '2024-07-14T00:00:00.000Z'
        data:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/ProductDto'
          maxPage:
            type: integer
            format: int64
            example: 1
          total:
            type: integer
            format: int64
            example: 1
    OutputGetProduct:
      type: object
      required:
        - product
        - salesPrices
      properties:
        statusCode:
          type: number
          example: 200
        path:
          type: string
          example: 'http://dominio.com/api/v1/caminho'
        timestamp:
          type: string
          example: '2024-07-14T00:00:00.000Z'
        data:
          type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductDto'
        salesPrices:
          type: array
          items:
            $ref: '#/components/schemas/SalePriceDto'
    OutputCreateProduct:
      type: object
      required:
        - product
      properties:
        statusCode:
          type: number
          example: 201
        path:
          type: string
          example: 'http://dominio.com/api/v1/caminho'
        timestamp:
          type: string
          example: '2024-07-14T00:00:00.000Z'
        data:
          type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductDto'
    InputCreateProduct:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          example: 'PRODUTO CRIACAO'
        cost:
          type: number
          example: 43.2
        image:
          type: string
          format: binary
    InputAssignSalePrice:
      type: object
      required:
        - salePrice
      properties:
        salePrice:
          type: number
          example: 43.2
    InputUpdateProduct:
      type: object
      properties:
        description:
          type: string
          example: 'PRODUTO ATUALIZACAO'
        cost:
          type: number
          example: 43.2
        image:
          type: string
          format: binary
    DefaultErrorResponse:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        path:
          type: string
          example: 'http://dominio.com/api/v1/caminho'
        timestamp:
          type: string
          example: '2024-07-14T00:00:00.000Z'
        errorCode:
          type: number
          description: 'Erro mapeado por parte de api para controle interno de errors.'
          example: 6
        message:
          type: string
          example: 'Ocorreu algum tipo de erro aqui'
